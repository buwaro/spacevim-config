" Let Vim and NeoVim shares the same plugin directory.
" Comment it out if you don't like
" let g:spacevim_plug_home = '~/.vim/plugged'
"


" Enable the existing layers in space-vim
function! Layers()

  " Default layers
  " Layer 'fzf'
  Layer 'unite'
  Layer 'better-defaults'

endfunction

" Add your own plugins
function! UserInit()

  " The default leader key is space key.
  " Uncomment the line below and modify "<\Space>" if you prefer another
  " let g:spacevim_leader = "<\Space>"

  " The default local leader key is comma.
  " Uncomment the line below and modify ',' if you prefer another
  " let g:spacevim_localleader = '<\Space>'

  " Install personal plugins
  Plug 'hecal3/vim-leader-guide'
  Plug 'scrooloose/nerdtree'
  Plug 'tpope/vim-rails'
  Plug 'tpope/vim-surround'
  Plug 'tpope/vim-fugitive'
  Plug 'airblade/vim-gitgutter'
  Plug 'w0rp/ale'
  Plug 'thosakwe/vim-flutter'
  Plug 'neoclide/coc.nvim', {'do': './install.sh nightly'}
  Plug 'sheerun/vim-polyglot'
  Plug 'storyn26383/vim-vue'
  Plug 'tiagofumo/dart-vim-flutter-layout'
  Plug 'tyru/caw.vim' " context aware commenting
  Plug 'Shougo/context_filetype.vim' " context aware commenting
  Plug 'ryanoasis/vim-devicons'
  Plug 'lotabout/skim', { 'dir': '~/.skim', 'do': './install' }
  Plug 'lotabout/skim.vim'

endfunction

" Override the default settings as well as adding extras
function! UserConfig()

  " Automatically reload buffer when a file has changed externally
  set autoread
  au FocusGained,BufEnter * :checktime " Trigger on buffer change or terminal focus
  au CursorHold,CursorHoldI * checktime " Trigger when cursor stops moving
  " set -g focus-events on " Catching terminal window focus inside plain vim

  "speedup text scrolling
  set lazyredraw " fast redraw of screen
  let g:vim_current_word#highlight_twins = 0
  let g:vim_current_word#highlight_current_word = 0
  let g:vim_current_word#enabled = 0
  " set noshowmatch

  " overflow text to the next line
  set wrap

  " If you have installed the powerline fonts and want to enable airline layer
  " let g:airline_powerline_fonts=1

  " Use gui colors in terminal if available
  if has('termguicolors')
    set termguicolors
      " If use vim inside tmux, see https://github.com/vim/vim/issues/993
      " set Vim-specific sequences for RGB colors
      let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
      let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
  endif

  " Show The leader guide
  nnoremap <silent> <leader> :<c-u>LeaderGuide '<Space>'<CR>

  " use fd to escape
  inoremap fd <ESC>

  " leader-vim menu items
  nmap <silent> <leader>ft :NERDTreeToggle<CR>
  nmap <silent> <leader>pi :PlugInstall<CR>

  " remap change windows keys to ctrl
  nmap <silent> <C-k> :wincmd k<CR>
  nmap <silent> <C-j> :wincmd j<CR>
  nmap <silent> <C-h> :wincmd h<CR>
  nmap <silent> <C-l> :wincmd l<CR>

  " cntrlP fuzzy search
  nmap <silent> <C-p> :Files<CR>

  " set 2 spaces for tabs
  :set tabstop=2 shiftwidth=2 expandtab

 " vim-flutter settings
  nmap <leader>fa :FlutterRun<cr>
  nmap <leader>fq :FlutterQuit<cr>
  nmap <leader>fr :FlutterHotReload<cr>
  nmap <leader>fR :FlutterHotRestart<cr>

  " prevent deoplete from auto inserting the selected drop down item
  set completeopt+=noinsert


  "
  " coc settings
  "

  " if hidden is not set, TextEdit might fail.
  set hidden

  " Some servers have issues with backup files, see #649
  set nobackup
  set nowritebackup

  " Better display for messages
  set cmdheight=2

  " Smaller updatetime for CursorHold & CursorHoldI
  set updatetime=300

  " don't give |ins-completion-menu| messages.
  set shortmess+=c

  " always show signcolumns
  set signcolumn=yes

  " Use tab for trigger completion with characters ahead and navigate.
  " Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
  inoremap <silent><expr> <TAB>
        \ pumvisible() ? "\<C-n>" :
        \ <SID>check_back_space() ? "\<TAB>" :
        \ coc#refresh()
  inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

  function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~# '\s'
  endfunction

  " Use <c-space> to trigger completion.
  inoremap <silent><expr> <c-space> coc#refresh()

  " Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
  " Coc only does snippet and additional edit on confirm.
  inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

  " Use `[c` and `]c` to navigate diagnostics
  nmap <silent> [c <Plug>(coc-diagnostic-prev)
  nmap <silent> ]c <Plug>(coc-diagnostic-next)

  " Remap keys for gotos
  nmap <silent> gd <Plug>(coc-definition)
  nmap <silent> gy <Plug>(coc-type-definition)
  nmap <silent> gi <Plug>(coc-implementation)
  nmap <silent> gr <Plug>(coc-references)

  " Use K to show documentation in preview window
  nnoremap <silent> K :call <SID>show_documentation()<CR>

  function! s:show_documentation()
    if (index(['vim','help'], &filetype) >= 0)
      execute 'h '.expand('<cword>')
    else
      call CocAction('doHover')
    endif
  endfunction

  " Highlight symbol under cursor on CursorHold
  autocmd CursorHold * silent call CocActionAsync('highlight')

  " Remap for rename current word
  nmap <leader>rn <Plug>(coc-rename)

  " Remap for format selected region
  xmap <leader>f  <Plug>(coc-format-selected)
  nmap <leader>f  <Plug>(coc-format-selected)

  augroup mygroup
    autocmd!
    " Setup formatexpr specified filetype(s).
    autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
    " Update signature help on jump placeholder
    autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
  augroup end

  " Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
  xmap <leader>a  <Plug>(coc-codeaction-selected)
  nmap <leader>a  <Plug>(coc-codeaction-selected)

  " Remap for do codeAction of current line
  nmap <leader>ac  <Plug>(coc-codeaction)
  " Fix autofix problem of current line
  nmap <leader>qf  <Plug>(coc-fix-current)

  " Use `:Format` to format current buffer
  command! -nargs=0 Format :call CocAction('format')

  " Use `:Fold` to fold current buffer
  command! -nargs=? Fold :call     CocAction('fold', <f-args>)


  " Add diagnostic info for https://github.com/itchyny/lightline.vim
  let g:lightline = {
        \ 'colorscheme': 'wombat',
        \ 'active': {
        \   'left': [ [ 'mode', 'paste' ],
        \             [ 'cocstatus', 'readonly', 'filename', 'modified' ] ]
        \ },
        \ 'component_function': {
        \   'cocstatus': 'coc#status'
        \ },
        \ }



  " Using CocList
  " Show all diagnostics
  nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
  " Manage extensions
  nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
  " Show commands
  nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
  " Find symbol of current document
  nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
  " Search workspace symbols
  nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
  " Do default action for next item.
  nnoremap <silent> <space>j  :<C-u>CocNext<CR>
  " Do default action for previous item.
  nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
  " Resume latest coc list
  nnoremap <silent> <space>p  :<C-u>CocListResume<CR>

  "
  " end coc settings
  "

  " polyglot settings
  let g:polyglot_disabled = ['vue']

  " ale settings
  let g:ale_sign_error = '✘'
  let g:ale_sign_warning = '⚠'
  highlight ALEErrorSign ctermbg=NONE ctermfg=red
  highlight ALEWarningSign ctermbg=NONE ctermfg=yellow

  " Nerd fonts
  let g:webdevicons_enable_nerdtree = 1
  let g:webdevicons_conceal_nerdtree_brackets = 1
  let g:webdevicons_enable_ctrlp = 1
endfunction
